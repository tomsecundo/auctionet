name: Backend CI

on:
  push:
    branches:
      - main  # Trigger CI on pushes to the main branch

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [22]  # Test on multiple Node.js versions

    environment: MONGO_URI

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Set CI environment variable to false
      run: echo "CI=false" >> $GITHUB_ENV


    # Set up Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Print Env Secret
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        PORT: ${{ secrets.PORT }}
      run: |
        echo "Secret 1 is: $MONGO_URI"
        echo "Secret 2 is: $JWT_SECRET"
        echo "Secret 3 is: $PORT"

    - name: Stop all PM2 processes (if any)
      run: |
        pm2 stop all || true  # Ignore if no processes are found

    # Install dependencies for backend
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        npm install --global yarn
        yarn --version
        yarn install

    # Install dependencies for frontend
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        df -h
        yarn install
        sudo rm -rf ./build
        yarn run build
    - name: Test MongoDB Connection
      run: |
        # Run a simple script to check MongoDB connection
        node -e "
          const mongoose = require('mongoose');
          mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
            .then(() => {
              console.log('MongoDB connected successfully');
              process.exit(0);  # Exit with success
            })
            .catch(err => {
              console.error('MongoDB connection failed:', err);
              process.exit(1);  # Exit with error if connection fails
            });
        "
    # Run backend tests
    - name: Run Backend Tests
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        PORT: ${{ secrets.PORT }}
      working-directory: ./backend
      run: npm test

    - run: npm ci

    - run: |
        cd ./backend
        touch .env
        echo "${{ secrets.PROD }}" > .env
    - run: |
        pm2 list || true  # Check if any processes are running (won't fail)
        pm2 start all || true  # Start all PM2 processes, ignore errors if no processes are found


    # - run: pm2 start all

    run: pm2 restart all
